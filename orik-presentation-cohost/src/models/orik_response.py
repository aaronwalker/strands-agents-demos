"""OrikResponse model for generated responses."""

from dataclasses import dataclass
from datetime import datetime
from typing import Optional

from .enums import ResponseType


@dataclass
class OrikResponse:
    """Represents a response generated by Orik."""
    
    response_text: str
    confidence: float
    response_type: ResponseType
    generation_time: datetime
    source_content: Optional[str] = None
    
    def __post_init__(self):
        """Validate response data after initialization."""
        if not self.response_text or not self.response_text.strip():
            raise ValueError("response_text cannot be empty")
        
        if not 0.0 <= self.confidence <= 1.0:
            raise ValueError("confidence must be between 0.0 and 1.0")
        
        if not isinstance(self.response_type, ResponseType):
            raise ValueError("response_type must be a ResponseType enum")
        
        if not isinstance(self.generation_time, datetime):
            raise ValueError("generation_time must be a datetime object")
    
    @property
    def is_high_confidence(self) -> bool:
        """Check if response has high confidence (>= 0.7)."""
        return self.confidence >= 0.7
    
    @property
    def word_count(self) -> int:
        """Get word count of the response."""
        return len(self.response_text.split())
    
    @property
    def estimated_duration_seconds(self) -> float:
        """Estimate speech duration based on average speaking rate."""
        # Average speaking rate: ~150 words per minute
        words_per_second = 150 / 60
        return self.word_count / words_per_second
    
    def to_dict(self) -> dict:
        """Convert to dictionary representation."""
        return {
            'response_text': self.response_text,
            'confidence': self.confidence,
            'response_type': self.response_type.value,
            'generation_time': self.generation_time.isoformat(),
            'source_content': self.source_content,
            'is_high_confidence': self.is_high_confidence,
            'word_count': self.word_count,
            'estimated_duration_seconds': self.estimated_duration_seconds
        }